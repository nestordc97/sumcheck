import math

import galois

from constants2 import char, degree, poly, dimension
from functions import boolean_matrix, evaluate_polynomial

GF = galois.GF(char**degree)

#The elements of the field have to be expressed as integers from 0 to char^degree-1
randoms = []


variables = len(poly[1])-1
for i in range (2, len(poly)):
    if len(poly[i])-1 != variables:
        raise ValueError("All the monomials must have the same number of variables!")

def round_summatory(p:list, r:int, subval:list):


    #r is the round, 0<r<=n

    #subval is the vector of random elements in the field. It has r-1 elements.

    subval.append(1)

    n=variables-r

    power = int(math.pow(2,n))

    univariate = []#The univariate polynomial
   
    for i in range (0,dimension+1):
        univariate.append(GF(0))


    for i in range (0,power):
        if (n>0):
            val = GF(subval+(boolean_matrix(n)[i]))#Now, val is a vector (v_1,...,v_{r-1},X_r,v_{r+1},...,v_n) such that v_1,...,v_{r-1} are random elements of the field and v_{r+1},...,v_n are boolean elements.
    #The missing element, v_r (here v_r=1), is the variable X_r of the univariate polynomial that the prover must equalize.
        else:
            val = GF(subval) #In this case, the variable of the univariate polynomial is the last one, and so there is no need to add values of a boolean_matrix
        for j in range (1, len(p)):
            
            degree = p[j][r]

            monomial = [[0]]+[p[j]]

            univariate[degree] = univariate[degree]+GF(evaluate_polynomial(monomial, val))

        univariate[0] = univariate[0]+GF(p[0][0])

    #GF.repr("poly")#This line and "GF.repr("int")" are here in order to visualize the terms of the polynomial as elements of a finite field. They can be deleted.
    print(GF(univariate))
    #GF.repr("int")

    c1= GF(0)
    for i in range (0,len(univariate)):#
        c1 = c1+univariate[i]

    c = (univariate[0])+c1#This value is g1(0)+g1(1) described in page 34 of the JThaler book.
    return(c)

print("Write the round")
r = int(input())

if (r>1):
    print("Write the "+str(r-1)+" random values")

for i in range (1,r):
    randoms.append(int(input()))

round_summatory(poly, r, randoms)
