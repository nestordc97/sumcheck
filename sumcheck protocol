import math
import random

import galois

from constants2 import char, degree, poly, dimension
from functions import boolean_matrix, evaluate_polynomial

GF = galois.GF(char**degree)

variables = len(poly[1])-1
for i in range (2, len(poly)):
    if len(poly[i])-1 != variables:
        raise ValueError("All the monomials must have the same number of variables!")


#The elements of the field have to be expressed as integers from 0 to char^degree-1


def one_dimensional_polynomial(p:list, val:int):#This function univariate polynomial in a value
    result = GF(p[0])
    for i in range (1, len(p)):
        result = result+GF(p[i])*GF(int(math.pow(val, i))%(int(math.pow(char,degree))))
    return(result)


def sum_check_protocol(p:list, dim:int):

    H = GF(0)#the number H that has to be equalized
    var = boolean_matrix(variables)

    for i in range(0,int(math.pow(2,variables))):
       H = H+evaluate_polynomial(p, var[i])

    if len(p) <2:
        raise ValueError("The polynomial should have variables. Not only the independent coefficient")

    #START OF THE PROTOCOL
    
    g1 = []
    randoms = []
    
    print("The dimension of the polynomial is "+str(dim))
    print("Send me the first univariate polynomial g(X) = a_0+a_1 X+...+a_"+str(dim)+"+ X^"+str(dim)+". You should send me the "+str(dim+1)+" values a_0,...,a_"+str(dim))

    polynomial = ""#The purpose of this variable is to let the prover know which polynomial has been chosen. It can be deleted.
    
    c1 = GF(0)
    
    for i in range (0, dim+1):
        try:
            g1.append(GF(int(input())))
        except:
            print("The values must be between 0 and "+str(int(math.pow(char, degree))-1)+"!")
            return
        if i != 0 and g1[i] != 0:
            
            polynomial = polynomial+"+"+str(g1[i])+"X^"+str(i)
            
            c1 = c1+g1[i]

    c1 = (2*g1[0]+c1)

    #This is the result of summing g1(0)+g1(1)
    polynomial = (str(g1[0])+polynomial)
    
    print("The polynomial you chose is "+polynomial)
    

    if (H != c1):
        print("You have been rejected")
        return()

    

    for r in range(1,len(poly[1])-1):#poly[1] is the number of variables+1 of the polynomial, it could be also poly[2], poly[3],...   

        #ROUND r, 0<r<=n
        
        r1 = random.randint(0,math.pow(char,degree)-1)

        randoms.append(GF(r1))
        
        print("The random element chosen is "+str(r1))

        gh = one_dimensional_polynomial(g1, GF(r1))

        print("Send me another polynomial")

        polynomial = ""
        c1 = GF(0)
        g1=[]
    
        for i in range (0, dim+1):
            
            try:
                g1.append(GF(int(input())))
            except:
                print("The values must be between 0 and "+str(int(math.pow(char, degree))-1)+"!")
                return
            if i != 0 and g1[i] != 0:
            
                polynomial = polynomial+"+"+str(g1[i])+"X^"+str(i)
            
                c1 = c1+g1[i]

        c1 = (2*g1[0]+c1)
        #This is the result of summing g1(0)+g1(1)
        
        polynomial = str(g1[0])+polynomial
    
        print("The polynomial you chose is "+polynomial)

        if (gh != c1):
            print("You have been rejected")
            return()



    #ROUND n

    r1 = random.randint(0,math.pow(char,degree)-1)

    randoms.append(GF(r1))

    gh = one_dimensional_polynomial(g1, GF(r1))   

    if (gh != evaluate_polynomial(p, randoms)):
            print("You have been rejected")
            return()
    else:
        print("Protocol accepted")
    
        
sum_check_protocol(poly,dimension) 
    
    


            
    
